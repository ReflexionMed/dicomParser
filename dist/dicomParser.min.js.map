{"version":3,"sources":["webpack://dicomParser/webpack/universalModuleDefinition","webpack://dicomParser/webpack/bootstrap","webpack://dicomParser/./readTag.js","webpack://dicomParser/./dataSet.js","webpack://dicomParser/./sharedCopy.js","webpack://dicomParser/./byteStream.js","webpack://dicomParser/./readSequenceItem.js","webpack://dicomParser/./byteArrayParser.js","webpack://dicomParser/./readDicomElementExplicit.js","webpack://dicomParser/./parseDicomDataSet.js","webpack://dicomParser/./readEncapsulatedPixelDataFromFragments.js","webpack://dicomParser/./littleEndianByteArrayParser.js","webpack://dicomParser/../node_modules/buffer/index.js","webpack://dicomParser/./alloc.js","webpack://dicomParser/./readDicomElementImplicit.js","webpack://dicomParser/./findItemDelimitationItem.js","webpack://dicomParser/./util/util.js","webpack://dicomParser/./readEncapsulatedImageFrame.js","webpack://dicomParser/./readPart10Header.js","webpack://dicomParser/./bigEndianByteArrayParser.js","webpack://dicomParser/./readSequenceElementImplicit.js","webpack://dicomParser/./readSequenceElementExplicit.js","webpack://dicomParser/./findAndSetUNElementLength.js","webpack://dicomParser/./findEndOfEncapsulatedPixelData.js","webpack://dicomParser/./util/elementToString.js","webpack://dicomParser/./readEncapsulatedPixelData.js","webpack://dicomParser/./parseDicom.js","webpack://dicomParser/./version.js","webpack://dicomParser/../node_modules/isarray/index.js","webpack://dicomParser/../node_modules/ieee754/index.js","webpack://dicomParser/../node_modules/base64-js/index.js","webpack://dicomParser/../node_modules/webpack/buildin/global.js","webpack://dicomParser/./util/createJPEGBasicOffsetTable.js","webpack://dicomParser/./util/dataSetToJS.js","webpack://dicomParser/./util/parseDA.js","webpack://dicomParser/./util/parseTM.js","webpack://dicomParser/./util/index.js","webpack://dicomParser/./index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","byteStream","undefined","groupNumber","readUint16","elementNumber","tag","toString","substr","_byteArrayParser","getByteArrayParser","element","defaultParser","parser","DataSet","byteArrayParser","byteArray","elements","_classCallCheck","index","length","dataOffset","readInt16","readUint32","readInt32","readFloat","readDouble","numMatching","readFixedString","match","fixedString","split","trim","replace","string","parseFloat","parseInt","bytes","offset","byteOffset","Buffer","slice","Uint8Array","buffer","_sharedCopy","ByteStream","position","warnings","numBytes","byteArrayView","_sharedCopy2","default","result","_readTag2","_readTag","byte","String","fromCharCode","untilTag","vr","getDataLengthSizeInBytesForVR","seek","hadUndefinedLength","_readSequenceElementExplicit2","_findEndOfEncapsulatedPixelData2","_findAndSetUNElementLength2","_findItemDelimitationItem2","parseDicomDataSetExplicit","dataSet","maxPosition","options","arguments","_readDicomElementExplicit2","parseDicomDataSetImplicit","_readDicomElementImplicit2","vrCallback","pixelDataElement","startFragmentIndex","numFragments","fragments","encapsulatedPixelData","basicOffsetTable","_byteStream2","_readSequenceItem2","fragmentZeroPosition","bufferSize","calculateBufferSize","pixelData","_alloc2","pixelDataIndex","fragmentOffset","j","startFragment","int16","byteArrayForParsingFloat","Float32Array","Float64Array","global","base64","ieee754","isArray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","Error","allocUnsafe","from","TypeError","ArrayBuffer","array","byteLength","fromArrayLike","fromArrayBuffer","encoding","isEncoding","actual","write","fromString","obj","isBuffer","len","checked","copy","val","type","data","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","buf","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","str","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","Symbol","species","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","stringtrim","base64clean","src","dst","isSequence","_readSequenceElementImplicit2","nextTag","itemDelimiterLength","stringVrs","AE","AS","AT","CS","DA","DS","DT","FL","FD","IS","LO","LT","OB","OD","OF","OW","PN","SH","SL","SQ","SS","ST","TM","UI","UL","UN","UR","US","UT","isStringVr","isPrivateTag","parsePN","personName","stringValues","familyName","givenName","middleName","prefix","suffix","frameIndex","findFragmentIndexWithOffset","calculateNumberOfFragmentsForFrame","_readEncapsulatedPixelDataFromFragments2","_readEncapsulatedPixelDataFromFragments","nextFrameOffset","littleEndianByteStream","_littleEndianByteArrayParser2","readPrefix","metaHeaderDataSet","_dataSet2","readTheHeader","items","item","readSequenceItemImplicit","readSQElementUndefinedLengthImplicit","readSQElementKnownLengthImplicit","parseDicomDataSet","readDicomDataSetImplicitUndefinedLength","readSequenceItemExplicit","readSQElementUndefinedLengthExplicit","readSQElementKnownLengthExplicit","readDicomDataSetExplicitUndefinedLength","baseOffset","textResult","multiElementToString","numItems","func","util","num","uint32","toUpperCase","uint16","int32","double","float","frame","deprecatedNoticeLogged","console","log","_readEncapsulatedImageFrame2","readDataSet","transferSyntax","x00020010","transferSyntaxElement","readTransferSyntax","explicit","isExplicit","dataSetByteStream","inflater","fullByteArrayCallback","pako","deflated","inflated","inflateRaw","fullByteArray","_bigEndianByteArrayParser2","getDataSetByteStream","ex","exception","_readPart10Header2","instanceDataSet","propertyName","mergeDataSets","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","b64","placeHoldersCount","tmp","placeHolders","Arr","L","revLookup","uint8","extraBytes","output","parts","len2","encodeChunk","lookup","g","Function","eval","window","isEndOfImageMarker","isFragmentEndOfImage","fragmentIndex","fragment","findLastImageFrameFragmentIndex","endFragmentIndex","explicitDataSetToJS","omitPrivateAttibutes","maxElementLength","sequenceItems","asString","_elementToString2","_elementToString","date","validate","yyyy","substring","mm","dd","daysInMonth","isValidDate","year","month","day","time","hh","ss","ffffff","hours","minutes","seconds","fractionalSeconds","keys","_util","forEach","key","_index","_parseDicomDataSet"],"mappings":"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","file":"dicomParser.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dicom-parser\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dicom-parser\"] = factory();\n\telse\n\t\troot[\"dicomParser\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 35);\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads a tag (group number and element number) from a byteStream\n * @param byteStream the byte stream to read from\n * @returns {string} the tag in format xggggeeee where gggg is the lowercase hex value of the group number\n * and eeee is the lower case hex value of the element number\n */\nexport default function readTag (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readTag: missing required parameter \\'byteStream\\'';\n  }\n\n  const groupNumber = byteStream.readUint16() * 256 * 256;\n  const elementNumber = byteStream.readUint16();\n  const tag = `x${(`00000000${(groupNumber + elementNumber).toString(16)}`).substr(-8)}`;\n\n  return tag;\n}\n","import { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * The DataSet class encapsulates a collection of DICOM Elements and provides various functions\n * to access the data in those elements\n *\n * Rules for handling padded spaces:\n * DS = Strip leading and trailing spaces\n * DT = Strip trailing spaces\n * IS = Strip leading and trailing spaces\n * PN = Strip trailing spaces\n * TM = Strip trailing spaces\n * AE = Strip leading and trailing spaces\n * CS = Strip leading and trailing spaces\n * SH = Strip leading and trailing spaces\n * LO = Strip leading and trailing spaces\n * LT = Strip trailing spaces\n * ST = Strip trailing spaces\n * UT = Strip trailing spaces\n *\n */\n\nfunction getByteArrayParser (element, defaultParser) {\n  return (element.parser !== undefined ? element.parser : defaultParser);\n}\n\n/**\n * Constructs a new DataSet given byteArray and collection of elements\n * @param byteArrayParser\n * @param byteArray\n * @param elements\n * @constructor\n */\nexport default class DataSet {\n  constructor (byteArrayParser, byteArray, elements) {\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.elements = elements;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  uint16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  int16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  uint32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  int32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 32 bit floating point number (VR=FL) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or has data of length 0\n     */\n  float (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readFloat(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 64 bit floating point number (VR=FD) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or doesn't has data of length 0\n     */\n  double (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readDouble(this.byteArray, element.dataOffset + (index * 8));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns the number of string values for the element\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @returns {*} the number of string values or undefined if the attribute is not present or has zero length data\n     */\n  numStringValues (tag) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n      var numMatching = fixedString.match(/\\\\/g);\n\n      if (numMatching === null) {\n        return 1;\n      }\n\n      return numMatching.length + 1;\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string for the element.  If index is provided, the element is assumed to be\n     * multi-valued and will return the component specified by index.  Undefined is returned\n     * if there is no component with the specified index, the element does not exist or is zero length.\n     *\n     * Use this function for VR types of AE, CS, SH and LO\n     *\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the entire string\n     * @returns {*}\n     */\n  string (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n        // trim trailing spaces\n\n        return values[index].trim();\n      }\n      // trim trailing spaces\n      return fixedString.trim();\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string with the leading spaces preserved and trailing spaces removed.\n     *\n     * Use this function to access data for VRs of type UT, ST and LT\n     *\n     * @param tag\n     * @param index\n     * @returns {*}\n     */\n  text (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n\n\n        return values[index].replace(/ +$/, '');\n      }\n\n      return fixedString.replace(/ +$/, '');\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to a float for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} a floating point number or undefined if not present or data not long enough\n     */\n  floatString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseFloat(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to an integer for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} an integer or undefined if not present or data not long enough\n     */\n  intString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseInt(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses an element tag according to the 'AT' VR definition (VR=AT).\n     * @param {String} A DICOM tag with in the format xGGGGEEEE.\n     * @returns {String} A string representation of a data element tag or undefined if the field is not present or data is not long enough.\n     */\n  attributeTag (tag) {\n    const element = this.elements[tag];\n\n    if (element && element.length === 4) {\n      const parser = getByteArrayParser(element, this.byteArrayParser).readUint16;\n      const bytes = this.byteArray;\n      const offset = element.dataOffset;\n\n      return `x${(`00000000${(parser(bytes, offset) * 256 * 256 + parser(bytes, offset + 2)).toString(16)}`).substr(-8)}`;\n    }\n\n    return undefined;\n  }\n}\n","/**\n *\n * Internal helper function to create a shared copy of a byteArray\n *\n */\n\n/**\n * Creates a view of the underlying byteArray.  The view is of the same type as the byteArray (e.g.\n * Uint8Array or Buffer) and shares the same underlying memory (changing one changes the other)\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param byteOffset offset into the underlying byteArray to create the view of\n * @param length number of bytes in the view\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function sharedCopy (byteArray, byteOffset, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return byteArray.slice(byteOffset, byteOffset + length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(byteArray.buffer, byteArray.byteOffset + byteOffset, length);\n  }\n  throw 'dicomParser.from: unknown type for byteArray';\n}\n","import sharedCopy from './sharedCopy.js';\nimport { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * Internal helper class to assist with parsing. Supports reading from a byte\n * stream contained in a Uint8Array.  Example usage:\n *\n *  var byteArray = new Uint8Array(32);\n *  var byteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n *\n * */\n\n/**\n * Constructor for ByteStream objects.\n * @param byteArrayParser a parser for parsing the byte array\n * @param byteArray a Uint8Array containing the byte stream\n * @param position (optional) the position to start reading from.  0 if not specified\n * @constructor\n * @throws will throw an error if the byteArrayParser parameter is not present\n * @throws will throw an error if the byteArray parameter is not present or invalid\n * @throws will throw an error if the position parameter is not inside the byte array\n */\nexport default class ByteStream {\n  constructor (byteArrayParser, byteArray, position) {\n    if (byteArrayParser === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArrayParser\\'';\n    }\n    if (byteArray === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArray\\'';\n    }\n    if ((byteArray instanceof Uint8Array) === false &&\n          (byteArray instanceof Buffer) === false) {\n      throw 'dicomParser.ByteStream: parameter byteArray is not of type Uint8Array or Buffer';\n    }\n    if (position < 0) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be less than 0';\n    }\n    if (position >= byteArray.length) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be greater than or equal to \\'byteArray\\' length';\n    }\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.position = position ? position : 0;\n    this.warnings = []; // array of string warnings encountered while parsing\n  }\n\n  /**\n     * Safely seeks through the byte stream.  Will throw an exception if an attempt\n     * is made to seek outside of the byte array.\n     * @param offset the number of bytes to add to the position\n     * @throws error if seek would cause position to be outside of the byteArray\n     */\n  seek (offset) {\n    if (this.position + offset < 0) {\n      throw 'dicomParser.ByteStream.prototype.seek: cannot seek to position < 0';\n    }\n    this.position += offset;\n  }\n\n  /**\n     * Returns a new ByteStream object from the current position and of the requested number of bytes\n     * @param numBytes the length of the byte array for the ByteStream to contain\n     * @returns {dicomParser.ByteStream}\n     * @throws error if buffer overread would occur\n     */\n  readByteStream (numBytes) {\n    if (this.position + numBytes > this.byteArray.length) {\n      throw 'dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread';\n    }\n    var byteArrayView = sharedCopy(this.byteArray, this.position, numBytes);\n\n    this.position += numBytes;\n\n    return new ByteStream(this.byteArrayParser, byteArrayView);\n  }\n\n  /**\n     *\n     * Parses an unsigned int 16 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     */\n  readUint16 () {\n    var result = this.byteArrayParser.readUint16(this.byteArray, this.position);\n\n    this.position += 2;\n\n    return result;\n  }\n\n  /**\n     * Parses an unsigned int 32 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parse unsigned int 32\n     * @throws error if buffer overread would occur\n     */\n  readUint32 () {\n    var result = this.byteArrayParser.readUint32(this.byteArray, this.position);\n\n    this.position += 4;\n\n    return result;\n  }\n\n  /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     */\n  readFixedString (length) {\n    var result = readFixedString(this.byteArray, this.position, length);\n\n    this.position += length;\n\n    return result;\n  }\n}\n","import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads the tag and length of a sequence item and returns them as an object with the following properties\n *  tag : string for the tag of this element in the format xggggeeee\n *  length: the number of bytes in this item or 4294967295 if undefined\n *  dataOffset: the offset into the byteStream of the data for this item\n * @param byteStream the byte\n * @returns {{tag: string, length: integer, dataOffset: integer}}\n */\nexport default function readSequenceItem (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItem: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.tag !== 'xfffee000') {\n    throw `dicomParser.readSequenceItem: item tag (FFFE,E000) not found at offset ${byteStream.position}`;\n  }\n\n  return element;\n}\n","/**\n * Internal helper functions common to parsing byte arrays of any type\n */\n\n/**\n * Reads a string of 8-bit characters from an array of bytes and advances\n * the position by length bytes.  A null terminator will end the string\n * but will not effect advancement of the position.  Trailing and leading\n * spaces are preserved (not trimmed)\n * @param byteArray the byteArray to read from\n * @param position the position in the byte array to read from\n * @param length the maximum number of bytes to parse\n * @returns {string} the parsed string\n * @throws error if buffer overread would occur\n * @access private\n */\nexport function readFixedString (byteArray, position, length) {\n  if (length < 0) {\n    throw 'dicomParser.readFixedString - length cannot be less than 0';\n  }\n\n  if (position + length > byteArray.length) {\n    throw 'dicomParser.readFixedString: attempt to read past end of buffer';\n  }\n\n  var result = '';\n  var byte;\n\n  for (var i = 0; i < length; i++) {\n    byte = byteArray[position + i];\n    if (byte === 0) {\n      position += length;\n\n      return result;\n    }\n    result += String.fromCharCode(byte);\n  }\n\n  return result;\n}\n","import findEndOfEncapsulatedElement from './findEndOfEncapsulatedPixelData.js';\nimport findAndSetUNElementLength from './findAndSetUNElementLength.js';\nimport findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readTag from './readTag.js';\nimport readSequenceItemsExplicit from './readSequenceElementExplicit.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst getDataLengthSizeInBytesForVR = (vr) => {\n  if (vr === 'OB' ||\n      vr === 'OW' ||\n      vr === 'SQ' ||\n      vr === 'OF' ||\n      vr === 'UT' ||\n      vr === 'UN') {\n    return 4;\n  }\n\n  return 2;\n};\n\nexport default function readDicomElementExplicit (byteStream, warnings, untilTag) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    vr: byteStream.readFixedString(2)\n    // length set below based on VR\n    // dataOffset set below based on VR and size of length\n  };\n\n  const dataLengthSizeBytes = getDataLengthSizeInBytesForVR(element.vr);\n\n  if (dataLengthSizeBytes === 2) {\n    element.length = byteStream.readUint16();\n    element.dataOffset = byteStream.position;\n  } else {\n    byteStream.seek(2);\n    element.length = byteStream.readUint32();\n    element.dataOffset = byteStream.position;\n  }\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  // if VR is SQ, parse the sequence items\n  if (element.vr === 'SQ') {\n    readSequenceItemsExplicit(byteStream, element, warnings);\n\n    return element;\n  }\n\n  if (element.length === 4294967295) {\n    if (element.tag === 'x7fe00010') {\n      findEndOfEncapsulatedElement(byteStream, element, warnings);\n\n      return element;\n    } else if (element.vr === 'UN') {\n      findAndSetUNElementLength(byteStream, element);\n\n      return element;\n    }\n\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  byteStream.seek(element.length);\n\n  return element;\n}\n","import readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\n\n/**\n * Internal helper functions for parsing implicit and explicit DICOM data sets\n */\n\n/**\n * reads an explicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetExplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? byteStream.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetExplicit: invalid value for parameter \\'maxP osition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementExplicit(byteStream, dataSet.warnings, options.untilTag);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n\n  if (byteStream.position > maxPosition) {\n    throw 'dicomParser:parseDicomDataSetExplicit: buffer overrun';\n  }\n}\n\n/**\n * reads an implicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetImplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? dataSet.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetImplicit: invalid value for parameter \\'maxPosition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementImplicit(byteStream, options.untilTag, options.vrCallback);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n}\n","import alloc from './alloc.js';\nimport ByteStream from './byteStream.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport sharedCopy from './sharedCopy.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst calculateBufferSize = (fragments, startFragment, numFragments) => {\n  let bufferSize = 0;\n\n  for (let i = startFragment; i < startFragment + numFragments; i++) {\n    bufferSize += fragments[i].length;\n  }\n\n  return bufferSize;\n};\n\n/**\n * Returns the encapsulated pixel data from the specified fragments.  Use this function when you know\n * the fragments you want to extract data from.  See\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the fragment data from\n * @param startFragmentIndex - zero based index of the first fragment to extract from\n * @param [numFragments] - the number of fragments to extract from, default is 1\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} byte array with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelDataFromFragments (dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments) {\n  // default values\n  numFragments = numFragments || 1;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // check parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'startFragmentIndex\\'';\n  }\n  if (numFragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'numFragments\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (startFragmentIndex < 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be >= 0';\n  }\n  if (startFragmentIndex >= pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be < number of fragments';\n  }\n  if (numFragments < 1) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'numFragments\\' must be > 0';\n  }\n  if (startFragmentIndex + numFragments > pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragment\\' + \\'numFragments\\' < number of fragments';\n  }\n\n  // create byte stream on the data for this pixel data element\n  const byteStream = new ByteStream(dataSet.byteArrayParser, dataSet.byteArray, pixelDataElement.dataOffset);\n\n  // seek past the basic offset table (no need to parse it again since we already have)\n  const basicOffsetTable = readSequenceItem(byteStream);\n\n  if (basicOffsetTable.tag !== 'xfffee000') {\n    throw 'dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000';\n  }\n\n  byteStream.seek(basicOffsetTable.length);\n\n  const fragmentZeroPosition = byteStream.position;\n\n  // tag + length\n  const fragmentHeaderSize = 8;\n\n  // if there is only one fragment, return a view on this array to avoid copying\n  if (numFragments === 1) {\n    return sharedCopy(byteStream.byteArray, fragmentZeroPosition + fragments[startFragmentIndex].offset + fragmentHeaderSize, fragments[startFragmentIndex].length);\n  }\n\n  // more than one fragment, combine all of the fragments into one buffer\n  const bufferSize = calculateBufferSize(fragments, startFragmentIndex, numFragments);\n  const pixelData = alloc(byteStream.byteArray, bufferSize);\n  let pixelDataIndex = 0;\n\n  for (let i = startFragmentIndex; i < startFragmentIndex + numFragments; i++) {\n    let fragmentOffset = fragmentZeroPosition + fragments[i].offset + fragmentHeaderSize;\n\n    for (let j = 0; j < fragments[i].length; j++) {\n      pixelData[pixelDataIndex++] = byteStream.byteArray[fragmentOffset++];\n    }\n  }\n\n  return pixelData;\n}\n","/**\n * Internal helper functions for parsing different types from a little-endian byte array\n */\n\nexport default {\n\n  /**\n   *\n   * Parses an unsigned int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return byteArray[position] + (byteArray[position + 1] * 256);\n  },\n\n  /**\n   *\n   * Parses a signed int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed signed int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n\n    let int16 = byteArray[position] + (byteArray[position + 1] << 8);\n\n    // fix sign\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n\n  /**\n   * Parses an unsigned int 32 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] * 256) +\n           (byteArray[position + 2] * 256 * 256) +\n           (byteArray[position + 3] * 256 * 256 * 256));\n  },\n\n  /**\n * Parses a signed int 32 from a little-endian byte array\n *\n * @param byteArray the byte array to read from\n * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] << 8) +\n           (byteArray[position + 2] << 16) +\n           (byteArray[position + 3] << 24));\n  },\n\n  /**\n   * Parses 32-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 32-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n\n    const floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  },\n\n  /**\n   * Parses 64-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 64-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n    byteArrayForParsingFloat[4] = byteArray[position + 4];\n    byteArrayForParsingFloat[5] = byteArray[position + 5];\n    byteArrayForParsingFloat[6] = byteArray[position + 6];\n    byteArrayForParsingFloat[7] = byteArray[position + 7];\n\n    const floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  }\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Creates a new byteArray of the same type (Uint8Array or Buffer) of the specified length.\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param length number of bytes of the Byte Array\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function alloc (byteArray, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return Buffer.alloc(length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(length);\n  }\n  throw 'dicomParser.alloc: unknown type for byteArray';\n}\n","import findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readSequenceItemsImplicit from './readSequenceElementImplicit.js';\nimport readTag from './readTag.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst isSequence = (element, byteStream, vrCallback) => {\n  // if a data dictionary callback was provided, use that to verify that the element is a sequence.\n  if (typeof vrCallback !== 'undefined') {\n    return (vrCallback(element.tag) === 'SQ');\n  }\n\n  if ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    // Item start tag (fffe,e000) or sequence delimiter (i.e. end of sequence) tag (0fffe,e0dd)\n    // These are the tags that could potentially be found directly after a sequence start tag (the delimiter\n    // is found in the case of an empty sequence). This is not 100% safe because a non-sequence item\n    // could have data that has these bytes, but this is how to do it without a data dictionary.\n    return (nextTag === 'xfffee000') || (nextTag === 'xfffee0dd');\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence item tag or sequence delimiter tag in peeking to determine VR');\n\n  return false;\n};\n\nexport default function readDicomElementImplicit (byteStream, untilTag, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  if (isSequence(element, byteStream, vrCallback)) {\n    // parse the sequence\n    readSequenceItemsImplicit(byteStream, element);\n\n    return element;\n  }\n\n  // if element is not a sequence and has undefined length, we have to\n  // scan the data for a magic number to figure out when it ends.\n  if (element.hadUndefinedLength) {\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  // non sequence element with known length, skip over the data part\n  byteStream.seek(element.length);\n\n  return element;\n}\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic numbers for the item delimitation item\n * and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findItemDelimitationItemAndSetElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const itemDelimitationItemLength = 8; // group, element, length\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe00d) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32(); // the length\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n","const stringVrs = {\n  AE: true,\n  AS: true,\n  AT: false,\n  CS: true,\n  DA: true,\n  DS: true,\n  DT: true,\n  FL: false,\n  FD: false,\n  IS: true,\n  LO: true,\n  LT: true,\n  OB: false,\n  OD: false,\n  OF: false,\n  OW: false,\n  PN: true,\n  SH: true,\n  SL: false,\n  SQ: false,\n  SS: false,\n  ST: true,\n  TM: true,\n  UI: true,\n  UL: false,\n  UN: undefined, // dunno\n  UR: true,\n  US: false,\n  UT: true\n};\n\n/**\n * Tests to see if vr is a string or not.\n * @param vr\n * @returns true if string, false it not string, undefined if unknown vr or UN type\n */\nconst isStringVr = (vr) => stringVrs[vr];\n\n/**\n * Tests to see if a given tag in the format xggggeeee is a private tag or not\n * @param tag\n * @returns {boolean}\n */\nconst isPrivateTag = (tag) => {\n  const lastGroupDigit = parseInt(tag[4], 10);\n  const groupIsOdd = (lastGroupDigit % 2) === 1;\n\n\n  return groupIsOdd;\n};\n\n/**\n * Parses a PN formatted string into a javascript object with properties for givenName, familyName, middleName, prefix and suffix\n * @param personName a string in the PN VR format\n * @param index\n * @returns {*} javascript object with properties for givenName, familyName, middleName, prefix and suffix or undefined if no element or data\n */\nconst parsePN = (personName) => {\n  if (personName === undefined) {\n    return undefined;\n  }\n  const stringValues = personName.split('^');\n\n\n  return {\n    familyName: stringValues[0],\n    givenName: stringValues[1],\n    middleName: stringValues[2],\n    prefix: stringValues[3],\n    suffix: stringValues[4]\n  };\n};\n\nexport {\n  isStringVr,\n  isPrivateTag,\n  parsePN\n};\n","import readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst findFragmentIndexWithOffset = (fragments, offset) => {\n  for (let i = 0; i < fragments.length; i++) {\n    if (fragments[i].offset === offset) {\n      return i;\n    }\n  }\n};\n\nconst calculateNumberOfFragmentsForFrame = (frameIndex, basicOffsetTable, fragments, startFragmentIndex) => {\n  // special case for last frame\n  if (frameIndex === basicOffsetTable.length - 1) {\n    return fragments.length - startFragmentIndex;\n  }\n\n  // iterate through each fragment looking for the one matching the offset for the next frame\n  const nextFrameOffset = basicOffsetTable[frameIndex + 1];\n\n  for (let i = startFragmentIndex + 1; i < fragments.length; i++) {\n    if (fragments[i].offset === nextFrameOffset) {\n      return i - startFragmentIndex;\n    }\n  }\n\n  throw 'dicomParser.calculateNumberOfFragmentsForFrame: could not find fragment with offset matching basic offset table';\n};\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element that has a non\n * empty basic offset table.  Note that this function will fail if the basic offset table is empty - in that\n * case you need to determine which fragments map to which frames and read them using\n * readEncapsulatedPixelDataFromFragments().  Also see the function createJEPGBasicOffsetTable() to see\n * how a basic offset table can be created for JPEG images\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frameIndex - the zero based frame index\n * @param [basicOffsetTable] - optional array of starting offsets for frames\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedImageFrame (dataSet, pixelDataElement, frameIndex, basicOffsetTable, fragments) {\n  // default parameters\n  basicOffsetTable = basicOffsetTable || pixelDataElement.basicOffsetTable;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (frameIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'frameIndex\\'';\n  }\n  if (basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' does not have basicOffsetTable';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have undefined length';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have fragments';\n  }\n  if (basicOffsetTable.length === 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: basicOffsetTable has zero entries';\n  }\n  if (frameIndex < 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be >= 0';\n  }\n  if (frameIndex >= basicOffsetTable.length) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be < basicOffsetTable.length';\n  }\n\n  // find starting fragment based on the offset for the frame in the basic offset table\n  const offset = basicOffsetTable[frameIndex];\n  const startFragmentIndex = findFragmentIndexWithOffset(fragments, offset);\n\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: unable to find fragment that matches basic offset table entry';\n  }\n\n  // calculate the number of fragments for this frame\n  const numFragments = calculateNumberOfFragmentsForFrame(frameIndex, basicOffsetTable, fragments, startFragmentIndex);\n\n  // now extract the frame from the fragments\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments);\n}\n","import ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.  If the options\n * argument is supplied and it contains the untilTag property, parsing will stop once that\n * tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options object to control parsing behavior (optional)\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a property dataSet with the\n *         elements successfully parsed before the error.\n */\n\nexport default function readPart10Header (byteArray, options) {\n  if (byteArray === undefined) {\n    throw 'dicomParser.readPart10Header: missing required parameter \\'byteArray\\'';\n  }\n\n  const littleEndianByteStream = new ByteStream(littleEndianByteArrayParser, byteArray);\n\n  function readPrefix () {\n    littleEndianByteStream.seek(128);\n    const prefix = littleEndianByteStream.readFixedString(4);\n\n    if (prefix !== 'DICM') {\n      throw 'dicomParser.readPart10Header: DICM prefix not found at location 132 - this is not a valid DICOM P10 file.';\n    }\n  }\n\n  // main function here\n  function readTheHeader () {\n    // Per the DICOM standard, the header is always encoded in Explicit VR Little Endian (see PS3.10, section 7.1)\n    // so use littleEndianByteStream throughout this method regardless of the transfer syntax\n    readPrefix();\n\n    const warnings = [];\n    const elements = {};\n\n    while (littleEndianByteStream.position < littleEndianByteStream.byteArray.length) {\n      const position = littleEndianByteStream.position;\n      const element = readDicomElementExplicit(littleEndianByteStream, warnings);\n\n      if (element.tag > 'x0002ffff') {\n        littleEndianByteStream.position = position;\n        break;\n      }\n      // Cache the littleEndianByteArrayParser for meta header elements, since the rest of the data set may be big endian\n      // and this parser will be needed later if the meta header values are to be read.\n      element.parser = littleEndianByteArrayParser;\n      elements[element.tag] = element;\n    }\n\n    const metaHeaderDataSet = new DataSet(littleEndianByteStream.byteArrayParser, littleEndianByteStream.byteArray, elements);\n\n    metaHeaderDataSet.warnings = littleEndianByteStream.warnings;\n    metaHeaderDataSet.position = littleEndianByteStream.position;\n\n    return metaHeaderDataSet;\n  }\n\n  // This is where we actually start parsing\n  return readTheHeader();\n}\n","/**\n * Internal helper functions for parsing different types from a big-endian byte array\n */\nexport default {\n\n  /**\n     *\n     * Parses an unsigned int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] << 8) + byteArray[position + 1];\n  },\n\n  /**\n     *\n     * Parses a signed int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n    var int16 = (byteArray[position] << 8) + byteArray[position + 1];\n    // fix sign\n\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n  /**\n     * Parses an unsigned int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    var uint32 = (256 * (256 * (256 * byteArray[position] +\n                                          byteArray[position + 1]) +\n                                          byteArray[position + 2]) +\n                                          byteArray[position + 3]);\n\n    return uint32;\n  },\n\n  /**\n     * Parses a signed int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    var int32 = ((byteArray[position] << 24) +\n                     (byteArray[position + 1] << 16) +\n                     (byteArray[position + 2] << 8) +\n                      byteArray[position + 3]);\n\n    return int32;\n  },\n\n  /**\n     * Parses 32-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 32-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[3] = byteArray[position];\n    byteArrayForParsingFloat[2] = byteArray[position + 1];\n    byteArrayForParsingFloat[1] = byteArray[position + 2];\n    byteArrayForParsingFloat[0] = byteArray[position + 3];\n    var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  },\n\n  /**\n     * Parses 64-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 64-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[7] = byteArray[position];\n    byteArrayForParsingFloat[6] = byteArray[position + 1];\n    byteArrayForParsingFloat[5] = byteArray[position + 2];\n    byteArrayForParsingFloat[4] = byteArray[position + 3];\n    byteArrayForParsingFloat[3] = byteArray[position + 4];\n    byteArrayForParsingFloat[2] = byteArray[position + 5];\n    byteArrayForParsingFloat[1] = byteArray[position + 6];\n    byteArrayForParsingFloat[0] = byteArray[position + 7];\n    var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  }\n};\n","import DataSet from './dataSet.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetImplicitUndefinedLength (byteStream, vrCallback) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementImplicit(byteStream, undefined, vrCallback);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  byteStream.warnings.push('eof encountered before finding sequence item delimiter in sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemImplicit (byteStream, vrCallback) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetImplicitUndefinedLength(byteStream, vrCallback);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetImplicit(item.dataSet, byteStream, byteStream.position + item.length, { vrCallback });\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthImplicit (byteStream, element, vrCallback) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence delimiter in sequence of undefined length');\n  element.length = byteStream.byteArray.length - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthImplicit (byteStream, element, vrCallback) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n}\n\n/**\n * Reads sequence items for an element in an implicit little endian byte stream\n * @param byteStream the implicit little endian byte stream\n * @param element the element to read the sequence items for\n * @param vrCallback an optional method that returns a VR string given a tag\n */\nexport default function readSequenceItemsImplicit (byteStream, element, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthImplicit(byteStream, element, vrCallback);\n  } else {\n    readSQElementKnownLengthImplicit(byteStream, element, vrCallback);\n  }\n}\n","import DataSet from './dataSet.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetExplicitUndefinedLength (byteStream, warnings) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementExplicit(byteStream, warnings);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  warnings.push('eof encountered before finding item delimiter tag while reading sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemExplicit (byteStream, warnings) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetExplicitUndefinedLength(byteStream, warnings);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetExplicit(item.dataSet, byteStream, byteStream.position + item.length);\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthExplicit (byteStream, element, warnings) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n\n  warnings.push('eof encountered before finding sequence delimitation tag while reading sequence of undefined length');\n  element.length = byteStream.position - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthExplicit (byteStream, element, warnings) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n}\n\nexport default function readSequenceItemsExplicit (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthExplicit(byteStream, element, warnings);\n  } else {\n    readSQElementKnownLengthExplicit(byteStream, element, warnings);\n  }\n}\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic number for the Sequence Delimitation\n * Item item and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findAndSetUNElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findAndSetUNElementLength: missing required parameter \\'byteStream\\'';\n  }\n\n  // group, element, length\n  const itemDelimitationItemLength = 8;\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe0dd) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32();\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end\n  // of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n","import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads an encapsulated pixel data element and adds an array of fragments to the element\n * containing the offset and length of each fragment and any offsets from the basic offset\n * table\n * @param byteStream\n * @param element\n */\nexport default function findEndOfEncapsulatedElement (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'element\\'';\n  }\n\n  element.encapsulatedPixelData = true;\n  element.basicOffsetTable = [];\n  element.fragments = [];\n\n  const basicOffsetTableItemTag = readTag(byteStream);\n\n  if (basicOffsetTableItemTag !== 'xfffee000') {\n    throw 'dicomParser.findEndOfEncapsulatedElement: basic offset table not found';\n  }\n\n  const basicOffsetTableItemlength = byteStream.readUint32();\n  const numFragments = basicOffsetTableItemlength / 4;\n\n  for (let i = 0; i < numFragments; i++) {\n    const offset = byteStream.readUint32();\n\n    element.basicOffsetTable.push(offset);\n  }\n\n  const baseOffset = byteStream.position;\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const tag = readTag(byteStream);\n    let length = byteStream.readUint32();\n\n    if (tag === 'xfffee0dd') {\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    } else if (tag === 'xfffee000') {\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n    } else {\n      if (warnings) {\n        warnings.push(`unexpected tag ${tag} while searching for end of pixel data element with undefined length`);\n      }\n\n      if (length > byteStream.byteArray.length - byteStream.position) {\n        // fix length\n        length = byteStream.byteArray.length - byteStream.position;\n      }\n\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    }\n\n    byteStream.seek(length);\n  }\n\n  if (warnings) {\n    warnings.push(`pixel data element ${element.tag} missing sequence delimiter tag xfffee0dd`);\n  }\n}\n","import * as util from './util.js';\n\n/**\n * Converts an explicit VR element to a string or undefined if it is not possible to convert.\n * Throws an error if an implicit element is supplied\n * @param dataSet\n * @param element\n * @returns {*}\n */\nexport default function explicitElementToString (dataSet, element) {\n  if (dataSet === undefined || element === undefined) {\n    throw 'dicomParser.explicitElementToString: missing required parameters';\n  }\n  if (element.vr === undefined) {\n    throw 'dicomParser.explicitElementToString: cannot convert implicit element to string';\n  }\n  var vr = element.vr;\n  var tag = element.tag;\n\n  var textResult;\n\n  function multiElementToString (numItems, func) {\n    var result = '';\n\n    for (var i = 0; i < numItems; i++) {\n      if (i !== 0) {\n        result += '/';\n      }\n      result += func.call(dataSet, tag, i).toString();\n    }\n\n    return result;\n  }\n\n  if (util.isStringVr(vr) === true) {\n    textResult = dataSet.string(tag);\n  } else if (vr === 'AT') {\n    var num = dataSet.uint32(tag);\n\n    if (num === undefined) {\n      return undefined;\n    }\n    if (num < 0) {\n      num = 0xFFFFFFFF + num + 1;\n    }\n\n    return `x${num.toString(16).toUpperCase()}`;\n  } else if (vr === 'US') {\n    textResult = multiElementToString(element.length / 2, dataSet.uint16);\n  } else if (vr === 'SS') {\n    textResult = multiElementToString(element.length / 2, dataSet.int16);\n  } else if (vr === 'UL') {\n    textResult = multiElementToString(element.length / 4, dataSet.uint32);\n  } else if (vr === 'SL') {\n    textResult = multiElementToString(element.length / 4, dataSet.int32);\n  } else if (vr === 'FD') {\n    textResult = multiElementToString(element.length / 8, dataSet.double);\n  } else if (vr === 'FL') {\n    textResult = multiElementToString(element.length / 4, dataSet.float);\n  }\n\n  return textResult;\n}\n","import readEncapsulatedImageFrame from './readEncapsulatedImageFrame.js';\nimport readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nlet deprecatedNoticeLogged = false;\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element.  If no basic offset\n * table is present, it assumes that all fragments are for one frame.  Note that this assumption/logic is not\n * valid for multi-frame instances so this function has been deprecated and will eventually be removed.  Code\n * should be updated to use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n *\n * @deprecated since version 1.6 - use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frame - the zero based frame index\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelData (dataSet, pixelDataElement, frame) {\n  if (!deprecatedNoticeLogged) {\n    deprecatedNoticeLogged = true;\n\n    if (console && console.log) {\n      console.log('WARNING: dicomParser.readEncapsulatedPixelData() has been deprecated');\n    }\n  }\n\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'element\\'';\n  }\n  if (frame === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'frame\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (frame < 0) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'frame\\' must be >= 0';\n  }\n\n  // If the basic offset table is not empty, we can extract the frame\n  if (pixelDataElement.basicOffsetTable.length !== 0) {\n    return readEncapsulatedImageFrame(dataSet, pixelDataElement, frame);\n  }\n\n  // No basic offset table, assume all fragments are for one frame - NOTE that this is NOT a valid\n  // assumption but is the original behavior so we are keeping it for now\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, 0, pixelDataElement.fragments.length);\n}\n","import alloc from './alloc.js';\nimport bigEndianByteArrayParser from './bigEndianByteArrayParser.js';\nimport ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readPart10Header from './readPart10Header.js';\nimport sharedCopy from './sharedCopy.js';\nimport * as byteArrayParser from './byteArrayParser.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.\n * If the options argument is supplied and it contains the untilTag property, parsing\n * will stop once that tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options object to control parsing behavior (optional)\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a\n *         property dataSet with the elements successfully parsed before the error.\n */\n\nexport default function parseDicom (byteArray, options) {\n  if (byteArray === undefined) {\n    throw 'dicomParser.parseDicom: missing required parameter \\'byteArray\\'';\n  }\n\n  function readTransferSyntax (metaHeaderDataSet) {\n    if (metaHeaderDataSet.elements.x00020010 === undefined) {\n      throw 'dicomParser.parseDicom: missing required meta header attribute 0002,0010';\n    }\n\n    const transferSyntaxElement = metaHeaderDataSet.elements.x00020010;\n\n    return byteArrayParser.readFixedString(byteArray, transferSyntaxElement.dataOffset, transferSyntaxElement.length);\n  }\n\n  function isExplicit (transferSyntax) {\n    // implicit little endian\n    if (transferSyntax === '1.2.840.10008.1.2') {\n      return false;\n    }\n\n    // all other transfer syntaxes should be explicit\n    return true;\n  }\n\n  function getDataSetByteStream (transferSyntax, position) {\n    if (transferSyntax === '1.2.840.10008.1.2.1.99') {\n      // if an infalter callback is registered, use it\n      if (options && options.inflater) {\n        const fullByteArrayCallback = options.inflater(byteArray, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArrayCallback, 0);\n      }\n      // if running on node, use the zlib library to inflate\n      // http://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js\n//       else if (typeof module !== 'undefined' && this.module !== module) {\n//         // inflate it\n//         const zlib = require('zlib');\n//         const deflatedBuffer = sharedCopy(byteArray, position, byteArray.length - position);\n//         const inflatedBuffer = zlib.inflateRawSync(deflatedBuffer);\n\n//         // create a single byte array with the full header bytes and the inflated bytes\n//         const fullByteArrayBuffer = alloc(byteArray, inflatedBuffer.length + position);\n\n//         byteArray.copy(fullByteArrayBuffer, 0, 0, position);\n//         inflatedBuffer.copy(fullByteArrayBuffer, position);\n\n//         return new ByteStream(littleEndianByteArrayParser, fullByteArrayBuffer, 0);\n//       }\n      // if pako is defined - use it.  This is the web browser path\n      // https://github.com/nodeca/pako\n      else if (typeof pako !== 'undefined') {\n        // inflate it\n        const deflated = byteArray.slice(position);\n        const inflated = pako.inflateRaw(deflated);\n\n        // create a single byte array with the full header bytes and the inflated bytes\n        const fullByteArray = alloc(byteArray, inflated.length + position);\n\n        fullByteArray.set(byteArray.slice(0, position), 0);\n        fullByteArray.set(inflated, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArray, 0);\n      }\n\n      // throw exception since no inflater is available\n      throw 'dicomParser.parseDicom: no inflater available to handle deflate transfer syntax';\n    }\n\n    // explicit big endian\n    if (transferSyntax === '1.2.840.10008.1.2.2') {\n      return new ByteStream(bigEndianByteArrayParser, byteArray, position);\n    }\n\n    // all other transfer syntaxes are little endian; only the pixel encoding differs\n    // make a new stream so the metaheader warnings don't come along for the ride\n    return new ByteStream(littleEndianByteArrayParser, byteArray, position);\n  }\n\n  function mergeDataSets (metaHeaderDataSet, instanceDataSet) {\n    for (const propertyName in metaHeaderDataSet.elements) {\n      if (metaHeaderDataSet.elements.hasOwnProperty(propertyName)) {\n        instanceDataSet.elements[propertyName] = metaHeaderDataSet.elements[propertyName];\n      }\n    }\n\n    if (metaHeaderDataSet.warnings !== undefined) {\n      instanceDataSet.warnings = metaHeaderDataSet.warnings.concat(instanceDataSet.warnings);\n    }\n\n    return instanceDataSet;\n  }\n\n  function readDataSet (metaHeaderDataSet) {\n    const transferSyntax = readTransferSyntax(metaHeaderDataSet);\n    const explicit = isExplicit(transferSyntax);\n    const dataSetByteStream = getDataSetByteStream(transferSyntax, metaHeaderDataSet.position);\n\n    const elements = {};\n    const dataSet = new DataSet(dataSetByteStream.byteArrayParser, dataSetByteStream.byteArray, elements);\n\n    dataSet.warnings = dataSetByteStream.warnings;\n\n    try {\n      if (explicit) {\n        parseDicomDataSet.parseDicomDataSetExplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      } else {\n        parseDicomDataSet.parseDicomDataSetImplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      }\n    } catch (e) {\n      const ex = {\n        exception: e,\n        dataSet\n      };\n\n      throw ex;\n    }\n\n    return dataSet;\n  }\n\n  // main function here\n  function parseTheByteStream () {\n    const metaHeaderDataSet = readPart10Header(byteArray, options);\n    const dataSet = readDataSet(metaHeaderDataSet);\n\n    return mergeDataSets(metaHeaderDataSet, dataSet);\n  }\n\n  // This is where we actually start parsing\n  return parseTheByteStream();\n}\n","export default '1.8.4';\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","// Each JPEG image has an end of image marker 0xFFD9\nfunction isEndOfImageMarker (dataSet, position) {\n  return (dataSet.byteArray[position] === 0xFF &&\n  dataSet.byteArray[position + 1] === 0xD9);\n}\n\nfunction isFragmentEndOfImage (dataSet, pixelDataElement, fragmentIndex) {\n  var fragment = pixelDataElement.fragments[fragmentIndex];\n  // Need to check the last two bytes and the last three bytes for marker since odd length\n  // fragments are zero padded\n\n  if (isEndOfImageMarker(dataSet, fragment.position + fragment.length - 2) ||\n    isEndOfImageMarker(dataSet, fragment.position + fragment.length - 3)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction findLastImageFrameFragmentIndex (dataSet, pixelDataElement, startFragment) {\n  for (var fragmentIndex = startFragment; fragmentIndex < pixelDataElement.fragments.length; fragmentIndex++) {\n    if (isFragmentEndOfImage(dataSet, pixelDataElement, fragmentIndex)) {\n      return fragmentIndex;\n    }\n  }\n}\n\n/**\n * Creates a basic offset table by scanning fragments for JPEG start of image and end Of Image markers\n * @param {object} dataSet - the parsed dicom dataset\n * @param {object} pixelDataElement - the pixel data element\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {Array} basic offset table (array of offsets to beginning of each frame)\n */\nexport default function createJPEGBasicOffsetTable (dataSet, pixelDataElement, fragments) {\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter dataSet';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter pixelDataElement';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010\\'';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (fragments && fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'fragments\\' must not be zero length';\n  }\n\n  // Default values\n  fragments = fragments || pixelDataElement.fragments;\n\n  var basicOffsetTable = [];\n\n  var startFragmentIndex = 0;\n\n  while (true) {\n    // Add the offset for the start fragment\n    basicOffsetTable.push(pixelDataElement.fragments[startFragmentIndex].offset);\n    var endFragmentIndex = findLastImageFrameFragmentIndex(dataSet, pixelDataElement, startFragmentIndex);\n\n    if (endFragmentIndex === undefined || endFragmentIndex === pixelDataElement.fragments.length - 1) {\n      return basicOffsetTable;\n    }\n    startFragmentIndex = endFragmentIndex + 1;\n  }\n}\n","import explicitElementToString from './elementToString.js';\nimport * as util from './util.js';\n\n/**\n * converts an explicit dataSet to a javascript object\n * @param dataSet\n * @param options\n */\nexport default function explicitDataSetToJS (dataSet, options) {\n  if (dataSet === undefined) {\n    throw 'dicomParser.explicitDataSetToJS: missing required parameter dataSet';\n  }\n\n  options = options || {\n    omitPrivateAttibutes: true, // true if private elements should be omitted\n    maxElementLength: 128 // maximum element length to try and convert to string format\n  };\n\n  var result = {\n\n  };\n\n  for (var tag in dataSet.elements) {\n    var element = dataSet.elements[tag];\n\n    // skip this element if it a private element and our options specify that we should\n    if (options.omitPrivateAttibutes === true && util.isPrivateTag(tag)) {\n      continue;\n    }\n\n    if (element.items) {\n      // handle sequences\n      var sequenceItems = [];\n\n      for (var i = 0; i < element.items.length; i++) {\n        sequenceItems.push(explicitDataSetToJS(element.items[i].dataSet, options));\n      }\n      result[tag] = sequenceItems;\n    } else {\n      var asString;\n\n      asString = undefined;\n      if (element.length < options.maxElementLength) {\n        asString = explicitElementToString(dataSet, element);\n      }\n\n      if (asString !== undefined) {\n        result[tag] = asString;\n      } else {\n        result[tag] = {\n          dataOffset: element.dataOffset,\n          length: element.length\n        };\n      }\n    }\n  }\n\n  return result;\n}\n","// algorithm based on http://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month\nfunction daysInMonth (m, y) { // m is 0 indexed: 0-11\n  switch (m) {\n  case 2 :\n    return (y % 4 == 0 && y % 100) || y % 400 == 0 ? 29 : 28;\n  case 9 : case 4 : case 6 : case 11 :\n    return 30;\n  default :\n    return 31;\n  }\n}\n\nfunction isValidDate (d, m, y) {\n  // make year is a number\n  if (isNaN(y)) {\n    return false;\n  }\n\n  return m > 0 && m <= 12 && d > 0 && d <= daysInMonth(m, y);\n}\n\n\n/**\n * Parses a DA formatted string into a Javascript object\n * @param {string} date a string in the DA VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n */\nexport default function parseDA (date, validate) {\n  if (date && date.length === 8) {\n    var yyyy = parseInt(date.substring(0, 4), 10);\n    var mm = parseInt(date.substring(4, 6), 10);\n    var dd = parseInt(date.substring(6, 8), 10);\n\n    if (validate) {\n      if (isValidDate(dd, mm, yyyy) !== true) {\n        throw `invalid DA '${date}'`;\n      }\n    }\n\n    return {\n      year: yyyy,\n      month: mm,\n      day: dd\n    };\n  }\n  if (validate) {\n    throw `invalid DA '${date}'`;\n  }\n\n  return undefined;\n}\n","/**\n * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n * @param {string} time - a string in the TM VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n */\nexport default function parseTM (time, validate) {\n  if (time.length >= 2) // must at least have HH\n  {\n    // 0123456789\n    // HHMMSS.FFFFFF\n    var hh = parseInt(time.substring(0, 2), 10);\n    var mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n    var ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n    var ffffff = time.length >= 8 ? parseInt(time.substring(7, 13), 10) : undefined;\n\n    if (validate) {\n      if ((isNaN(hh)) ||\n        (mm !== undefined && isNaN(mm)) ||\n        (ss !== undefined && isNaN(ss)) ||\n        (ffffff !== undefined && isNaN(ffffff)) ||\n        (hh < 0 || hh > 23) ||\n        (mm && (mm < 0 || mm > 59)) ||\n        (ss && (ss < 0 || ss > 59)) ||\n        (ffffff && (ffffff < 0 || ffffff > 999999))) {\n        throw `invalid TM '${time}'`;\n      }\n    }\n\n    return {\n      hours: hh,\n      minutes: mm,\n      seconds: ss,\n      fractionalSeconds: ffffff\n    };\n  }\n\n  if (validate) {\n    throw `invalid TM '${time}'`;\n  }\n\n  return undefined;\n}\n","export * from './util.js';\n\nexport { default as parseTM } from './parseTM.js';\nexport { default as parseDA } from './parseDA.js';\nexport { default as explicitElementToString } from './elementToString.js';\nexport { default as explicitDataSetToJS } from './dataSetToJS.js';\nexport { default as createJPEGBasicOffsetTable } from './createJPEGBasicOffsetTable.js';\n","export * from './util/index.js';\nexport * from './parseDicomDataSet.js';\nexport * from './byteArrayParser.js';\n\nexport { default as alloc } from './alloc.js';\nexport { default as version } from './version.js';\nexport { default as bigEndianByteArrayParser } from './bigEndianByteArrayParser.js';\nexport { default as ByteStream } from './byteStream.js';\nexport { default as sharedCopy } from './sharedCopy.js';\nexport { default as DataSet } from './dataSet.js';\nexport { default as findAndSetUNElementLength } from './findAndSetUNElementLength.js';\nexport { default as findEndOfEncapsulatedElement } from './findEndOfEncapsulatedPixelData.js';\nexport { default as findItemDelimitationItemAndSetElementLength } from './findItemDelimitationItem.js';\nexport { default as littleEndianByteArrayParser } from './littleEndianByteArrayParser.js';\nexport { default as parseDicom } from './parseDicom.js';\nexport { default as readDicomElementExplicit } from './readDicomElementExplicit.js';\nexport { default as readDicomElementImplicit } from './readDicomElementImplicit.js';\nexport { default as readEncapsulatedImageFrame } from './readEncapsulatedImageFrame.js';\nexport { default as readEncapsulatedPixelData } from './readEncapsulatedPixelData.js';\nexport { default as readEncapsulatedPixelDataFromFragments } from './readEncapsulatedPixelDataFromFragments.js';\nexport { default as readPart10Header } from './readPart10Header.js';\nexport { default as readSequenceItemsExplicit } from './readSequenceElementExplicit.js';\nexport { default as readSequenceItemsImplicit } from './readSequenceElementImplicit.js';\nexport { default as readSequenceItem } from './readSequenceItem.js';\nexport { default as readTag } from './readTag.js';\n"],"sourceRoot":""}